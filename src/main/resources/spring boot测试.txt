一、选择题（共12小题，每小题2.5分，共30分）
	以下不是spring boot优点的是 ( d )
		A．快速搭建项目
		B．简化配置  
		C．自动配置  
		D．无需容器
	Spring Boot配置，以下哪个优先级最高（a ）
		A、外置：xx.jar同目录下/config/application.properties；
		B、外置：xx.jar同目录下/config/application.yml；
		C、内置：src/main/resources/config；
		D、内置：src/main/resources
	以下log日志级别哪个最高（D）
		A、DEBUG
		B、INFO
		C、WARN
		D、ERROR
	以下不是spring boot的核心注解的是 ( C )
		A.	@SpringBootConfiguration
		B.	@EnableAutoConfiguration
		C.	@ComponentScan
		D.	@MapperScan
	要使用springMVC的功能，需要导入那个包 (C  )
		A．spring-boot-starter-jdbc  
		B．spring-boot-starter-thymeleaf  
		C．spring-boot-starter-web  
		D．mybatis-spring-boot-starter
	以下哪个注解不能加在类上 ( B )
		A.	@Controller
		B.	@ResponseBody
		C.	@RestController
		D.	@RequestMapping
	当控制层上有@RestController注解时，方法中返回一个字符串“<h1>Hello</h1>”，浏览器调用的结果是 ( D )
		A. 一级标题显示的Hello
		B.	找不到Hello.html
		C.	<h1>Hello</>
		D.	Hello
	SpringBoot项目中配置文件的格式 (C  )
		A．properties  
		B．yml  
		C．两者都可以
	不是SpringBoot核心配置文件是（A）
		A.	bootstrap
		B.	application
		C.	application-dev
	前台使用json参数格式，控制器consumer、参数使用的注解是（A）
		A、application/josn ---- @RequestBody
		B、application/josn ---- @ModelAttribute
		C、application/x-www-form-urlencoded ---- @RequestBody
		D、application/x-www-form-urlencoded ---- @ModelAttribute
	@Pointcut("execution(public * com.thornBird.sbd.modules.*.controller.*.*(..))")，第三个*代表（C）
		A、代表返回类型不限
		B、代表module下所有子包
		C、代表所有类
		D、代表所有方法
	Url匹配风格中/admin*，以下哪个匹配不正确（B）
		A、/admin
		B、/admin1
		C、/admin123
		D、/admin/1
	Mybatis框架中，插入数据使用那个注解（B）
		A、@Update
		B、@Insert
		C、@Select
		D、@InsertMapping

二、填空题（共5小题，每小题5分，共25分）
	获取配置文件的属性值，使用哪个注解_____@Value___________；
	Java配置依赖的2个注解是_____@Configuration_____@Bean___________;
	Spring Boot修改tomcat端口号为9090应该怎么写？____server.port=9090________;
	自定义拦截器需要实现__HandlerInterceptor______接口；
	过滤器需要使用_____@WebFilter____注解;
	上传文件，使用____接收文件对象，consumer使用_____;

三、问答题（每题5分，共25分）
	阐述 Spring Boot 特性，举一个例子来解释 Staters 的内容；
               答：该特性开箱即可使用，提供很多默认配置来简化项目配置，内部嵌入容器简化web项目，
相比众多的xml文件来说，更加容易配置；而staters就像一个工场，快速生成可靠产品，我们只管使用。
	
Mybatis传参中，#{*}、${*}的区别？
                答：#{*}相对会安全些，在传入参数的时候，默认带引号，例如where s='s'，
 ${*}更加适合没有引号的参数传入例如orderby id desc；
	简述Restful规则？
                答：RESTful规则
	书写规则
		URI结尾不应包含（/）；
		正斜杠分隔符（/）必须用来指示层级关系；
		应使用连字符（ - ）来提高URI的可读性；
		不得在URI中使用下划线（_）；
		URI路径中全都使用小写字母；
	命名规则
		单资源 ---- URL中不要Get、Update等字样，通过请求类型控制
			GET /api/user；
			POST /api/user；
		单资源带id
			GET /api/user/1；
			POST /api/user/1；
			POST /order/{id}/name ---- 重命名；
			POST /order/{id}/status ---- 修改状态；
		复数资源：GET /api/users；
		复数资源查找
			GET /api/users/search?name=123；
			GET /api/users/searchByName?name=123；
		嵌套资源
			GET /api/teams ---- 团队列表；
			GET /api/teams/123 ---- ID 为 123 的团队；
			GET /api/teams/123/members ---- ID 为 123 的团队下的成员列表；
			GET /api/teams/123/members/456 ---- ID 为 123 的团队下 ID 未 456 的成员；
			
	简述Git使用流程，写几个常用Git命令？
                答：1，idea提交，登录giehub账户名-commit提交到本地-并选择索要提交的内容-add添加-push到云端
                       2，初始化：创建一个git仓库，创建之后就会在当前目录生成一个.git的文件
                           git init
                         添加文件：把文件添加到缓冲区
                          git add filename
                          添加所有文件到缓冲区：
                          git add .
                          git add --all
                            删除文件
                          git rm filename
                            提交
                             gitcommit
                          克隆
                           git clone url
	简述shiro两大功能实现流程；
                  答：页面传入参数，service层，令牌进入login方法，传到myrealm认证，return时存入session，同时在比对器比对；比对通过，到myrealm的授权获取对应角色，用户相关信息传到前端

四、编程题（每题10分，共20分）
	1、提供一个接口，返回 List<User> 列表，对该列表进行排序、保留10条数据；页面端使用 ajax post 方式提交请求，包装查询参数，获取接口返回数据，并遍历数据渲染到页面上 table 表格中；
	答：页面->
 <table id="datatable" class="table table-striped table-bordered" style="width:100%">
                                        <thead>
                                        <tr>
                                            <th>UserId</th>
                                            <th>UserName</th>
                                            <th>Password</th>
                                            <th>CreateDate</th>
                                            <th>Operation</th>
                                        </tr>
                                        </thead>
                                        <tbody>
                                        </tbody>
                                    </table>
请求：
$(document).ready(function() {
        initUserTable(DEFAULT_PAGE_SIZE);
})
 function initUserTable(pageSize) {
        $('#datatable').DataTable({
            'paging': true, //分页
            "serverSide": true, //开启后端分页
            "pagingType": "full_numbers", //分页样式的类型simple/simple_numbers/full/full_numbers
            "pageLength": pageSize, //定义初始的页长
            "processing": true,
            "destroy": true, //允许销毁替换，在表格重新查询时，可以自动销毁以前的data
            'lengthChange': true, //控制是否能够调整每页的条数
            'searching': true,
            'data-show-refresh': true,
            'ordering': true,
            'autoWidth': false,
            "ajax": function (data, callback, settings) {
                // 从data获取查询数据
                var columIndex = data.order[0].column;
                var sort = data.order[0].dir;
                var orderBy = data.columns[columIndex].name;
                pageSize = data.length == undefined  ? pageSize : data.length;

                var searchVo = {};
                searchVo.currentPage = (data.start / pageSize) + 1;
                searchVo.pageSize = pageSize;
                searchVo.orderBy = orderBy;
                searchVo.sort = sort;
                searchVo.keyWord = data.search.value;

                $.ajax({
                    url : "/api/users",
                    type : "post",
                    contentType: "application/json",
                    data : JSON.stringify(searchVo),
                    success : function (rs) {
                        var fData = {
                            draw :0,
                            recordsTotal: 0,
                            recordsFiltered: 0,
                            data: []
                        };
                        if (!rs) {
                            layer.alert("请求出错，请稍后重试" + rs.errmsg, {icon: 2});
                            callback(fData);
                            return;
                        };
                        if (rs.list == null) {
                            $('#datatable tbody tr').remove();
                            $('#loading').remove();
                            callback(fData);
                            return;
                        }
                        $('#loading').remove();
                        var gearDatas = [];
                        for (var i = 0; i < rs.list.length; i++) {
                            //包装行数据
                            var rowData = new TData(rs.list[i].userId, rs.list[i].userName,
                                rs.list[i].password, rs.list[i].createDate);
                            // 将行数据放到数组里
                            gearDatas.push(rowData);
                        }
                        fData.data = gearDatas;
                        fData.recordsTotal = rs.total;
                        fData.recordsFiltered = rs.total;
                        callback(fData);
                    },
                    error : function (data) {
                        layer.alert(data.responseText, {icon: 0});
                    }
                });
            },
            "columns": [ //定义行数据字段
                {data: 'userId', name: "user_id", sortable: true},
                {data: 'userName', name: "user_name", sortable: true},
                {data: 'password', name: "password", sortable: true},
                {data: 'createDate', name: "create_date", sortable: true},
                {data: 'operate', width: '80px', sortable: false}
            ]
        });
    }
    //行数据结构
    function TData(userId, userName, password, createDate) {
        this.userId = userId;
        this.userName = userName;
        this.password = password;
        this.createDate = createDate;
        this.operate = function () {
            return "<a href='#' class='btn_editcolor' data-toggle='modal' data-target='#userEditModal' " +
                "onclick='initEditModal(\"" + userId + "\")'>编辑</a>&nbsp;" +
                "<a href='javascript:void(0);' onclick='deleteUser(\"" + userId + "\")' class='btn_editcolor'>删除</a>";
        }
    }
sql语句-> @Select("<script>" +
            "select top 10 * from user "
            + "<where> "
            + "<if test='keyWord != \"\" and keyWord != null'>"
            + " and (user_name like '%${keyWord}%') "
            + "</if>"
            + "</where>"
            + "<choose>"
            + "<when test='orderBy != \"\" and orderBy != null'>"
            + " order by ${orderBy} ${sort}"
            + "</when>"
            + "<otherwise>"
            + " order by user_id desc"
            + "</otherwise>"
            + "</choose>"
            + "</script>")
    List<User> getUsersBySearchVo(SearchVo searchVo);

	2、设计一套购物车接口，以 Cookie 或者 redis 实现
